package sr

import (
	"fmt"
	"text/template"

	"github.com/iancoleman/strcase"
	"github.com/pkg/errors"
	"github.com/visor-tax/firemodel"
	"github.com/visor-tax/firemodel/version"
)

func init() {
	firemodel.RegisterModeler("sr", &Modeler{})
}

type Modeler struct{}

func (m *Modeler) Model(schema *firemodel.Schema, sourceCoder firemodel.SourceCoder) error {
  f, err := sourceCoder.NewFile("firemodel.rules")
	if err != nil {
		return errors.Wrapf(err, "firemodel/sr: create security rules file")
	}
	defer f.Close()

	if err := tpl.Execute(f, schema); err != nil {
		return errors.Wrapf(err, "firemodel/sr: generating security rules")
	}

	return nil
}

var (
  tpl = template.Must(template.
		New("file").
		Funcs(map[string]interface{}{
			"firemodelVersion": func() string { return version.Version },
      "toSecurityRulesTypeCheck": toSecurityRulesTypeCheck,
			"ToScreamingSnake": strcase.ToScreamingSnake,
			"ToLowerCamel":     strcase.ToLowerCamel,
			"ToCamel":          strcase.ToCamel,
			"getModelOption":   getModelOption,
			"getSchemaOption":  getSchemaOption,
			"validatorFunctionName":    validatorFunctionName,
			"completeValidatorFunctionName": completeValidatorFunctionName,
		}).
		Parse(file),
	)
	_ = template.Must(tpl.New("model").Parse(model))
	_ = template.Must(tpl.New("model_complete").Parse(model_complete))
	_ = template.Must(tpl.New("enum").Parse(enum))
	_ = template.Must(tpl.New("struct").Parse(structTpl))
	_ = template.Must(tpl.New("struct_complete").Parse(structTpl_complete))
)

func validatorFunctionName(sym string) string {
	return fmt.Sprintf("is_%s", strcase.ToCamel(sym))
}

func completeValidatorFunctionName(sym string) string {
	return fmt.Sprintf("isComplete_%s", strcase.ToCamel(sym))
}

func toSecurityRulesTypeCheck(firetype firemodel.SchemaFieldType, fieldName string, complete bool) string {
	switch firetype := firetype.(type) {
	case *firemodel.Boolean:
		return fmt.Sprintf("resource.%s is bool", fieldName)
	case *firemodel.Integer, *firemodel.Double:
		return fmt.Sprintf("resource.%s is int", fieldName)
	case *firemodel.Timestamp:
		return fmt.Sprintf("resource.%s is timestamp", fieldName)
	case *firemodel.String:
		return fmt.Sprintf("resource.%s is string", fieldName)
	case *firemodel.Enum:
		return fmt.Sprintf("%s(resource.%s)",validatorFunctionName(firetype.T.Name), fieldName)
	case *firemodel.URL:
		return fmt.Sprintf("resource.%s is string", fieldName)
	case *firemodel.Bytes:
		return fmt.Sprintf("resource.%s is string", fieldName)
	case *firemodel.Reference:
    return fmt.Sprintf("resource.%s is string", fieldName)
	case *firemodel.GeoPoint:
		return fmt.Sprintf("resource.%s is latlng", fieldName)
	case *firemodel.Array:
    return fmt.Sprintf("resource.%s is list", fieldName)
	case *firemodel.Struct:
		if complete {
			return fmt.Sprintf("%s(resource.%s)", completeValidatorFunctionName(firetype.T.Name), fieldName)
		}
		return fmt.Sprintf("%s(resource.%s)", validatorFunctionName(firetype.T.Name), fieldName)
	case *firemodel.File:
		return fmt.Sprintf("resource.%s is path", fieldName)
	case *firemodel.Map:
    return fmt.Sprintf("resource.%s is map", fieldName)
	default:
		err := errors.Errorf("firemodel/sr: unknown type %s", firetype)
		panic(err)
	}
}

func getSchemaOption(namespace string, key string, defaultValue string, options firemodel.SchemaOptions) string {
	ns, ok := options[namespace]
	if !ok {
		return defaultValue
	}
	opt, ok := ns[key]
	if !ok {
		return defaultValue
	}
	return opt
}

func getModelOption(namespace string, key string, required bool, options firemodel.SchemaModelOptions) string {
	ns, ok := options[namespace]
	if !ok {
		if required {
			err := errors.Errorf("option %s.%s is required but not set", namespace, key)
			panic(err)
		} else {
			return ""
		}
	}
	opt, ok := ns[key]
	if !ok {
		if required {
			err := errors.Errorf("option %s.%s is required but not set", namespace, key)
			panic(err)
		} else {
			return ""
		}
	}
	return opt
}

const (

file = `// DO NOT EDIT - Code generated by firemodel {{firemodelVersion}}.
  {{- range .Enums -}}
  {{- template "enum" .}}
  {{- end}}
  {{- range .Structs -}}
  {{- template "struct" .}}
  {{- end}}
  {{- range .Structs -}}
  {{- template "struct_complete" .}}
  {{- end}}
  {{- range .Models -}}
  {{- template "model" .}}
  {{- end}}
  {{- range .Models -}}
  {{- template "model_complete" .}}
  {{- end}}
`
	model = `
  {{if .Comment}}
  /** {{.Comment}} */
  {{- end}}
  function {{.Name | validatorFunctionName}}(resource) {
    return resource.keys().hasOnly([{{- range .Collections}}'{{.Name | ToLowerCamel -}}',
    {{- end}}{{- range $index, $value := .Fields}}{{if $index}},{{end}}'{{.Name | ToLowerCamel -}}'
    {{- end}}{{- if .Options | getModelOption "firestore" "autotimestamp" false}}{{- if or .Fields .Collections}},{{- end}}'createdAt','updatedAt'{{- end}}])

    {{- range .Collections}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}
        && ((!resource.keys().hasAny(['{{.Name | ToLowerCamel -}}'])) || (resource.{{.Name | ToLowerCamel}} is string))
    {{- end}}

    {{- range .Fields}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}
        && ((!resource.keys().hasAny(['{{.Name | ToLowerCamel -}}'])) || ({{toSecurityRulesTypeCheck .Type (.Name | ToLowerCamel) false}}))
    {{- end}}

    {{- if .Options | getModelOption "firestore" "autotimestamp" false}}
    /** Record creation timestamp. */
        && ((!resource.keys().hasAny(['createdAt'])) || (resource.createdAt is timestamp))
    /** Record update timestamp. */
        && ((!resource.keys().hasAny(['updatedAt'])) || (resource.updatedAt is timestamp))
    {{- end}};
  }`

  model_complete = `
  {{if .Comment}}
  /** {{.Comment}} */
  {{- end}}
  function {{.Name | completeValidatorFunctionName}}(resource) {
    return resource.keys().hasOnly([{{- range .Collections}}'{{.Name | ToLowerCamel -}}',
    {{- end}}{{- range $index, $value := .Fields}}{{if $index}},{{end}}'{{.Name | ToLowerCamel -}}'
    {{- end}}{{- if .Options | getModelOption "firestore" "autotimestamp" false}}{{- if or .Fields .Collections}},{{- end}}'createdAt','updatedAt'{{- end}}])
	      && resource.keys().hasAll([{{- range .Collections}}'{{.Name | ToLowerCamel -}}',
    {{- end}}{{- range $index, $value := .Fields}}{{if $index}},{{end}}'{{.Name | ToLowerCamel -}}'
    {{- end}}{{- if .Options | getModelOption "firestore" "autotimestamp" false}}{{- if or .Fields .Collections}},{{- end}}'createdAt','updatedAt'{{- end}}])

    {{- range .Collections}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}
        && resource.{{.Name | ToLowerCamel}} is string
    {{- end}}

    {{- range .Fields}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}
        && {{toSecurityRulesTypeCheck .Type (.Name | ToLowerCamel) true}}
    {{- end}}

    {{- if .Options | getModelOption "firestore" "autotimestamp" false}}
    /** Record creation timestamp. */
        && resource.createdAt is timestamp
    /** Record update timestamp. */
        && resource.updatedAt is timestamp
    {{- end}};
  }`

	structTpl = `
  {{if .Comment}}
  /** {{.Comment}} */
  {{- end}}
  function {{.Name | validatorFunctionName}}(resource) {
    return resource.keys().hasOnly([{{- range $index, $value := .Fields}}{{if $index}},{{end}}'{{.Name | ToLowerCamel -}}'
    {{- end}}])

    {{- range .Fields}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}
	      && ((!resource.keys().hasAny(['{{.Name | ToLowerCamel -}}'])) || ({{toSecurityRulesTypeCheck .Type (.Name | ToLowerCamel) false}}))
    {{- end}};
  }`

  	structTpl_complete = `
  {{if .Comment}}
  /** {{.Comment}} */
  {{- end}}
  function {{.Name | completeValidatorFunctionName}}(resource) {
    return resource.keys().hasOnly([{{- range $index, $value := .Fields}}{{if $index}},{{end}}'{{.Name | ToLowerCamel -}}'
    {{- end}}])
	      && resource.keys().hasAll([{{- range $index, $value := .Fields}}{{if $index}},{{end}}'{{.Name | ToLowerCamel -}}'
    {{- end}}])

    {{- range .Fields}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}
	      && {{toSecurityRulesTypeCheck .Type (.Name | ToLowerCamel) true}}
    {{- end}};
  }`

	enum = `
  {{if .Comment}}
  /** {{.Comment}} */
  {{- end}}
  function {{.Name | validatorFunctionName}}(resource) {
    return 
    {{- range $index, $value := .Values}}
    {{- if .Comment}}
    /** {{.Comment}} */
    {{- end}}{{if $index}}
        ||{{end}} resource == '{{.Name | ToScreamingSnake}}'
    {{- end}};
  }`
)
