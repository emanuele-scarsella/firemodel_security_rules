// DO NOT EDIT - Code generated by firemodel (dev).
  
  function is_TestEnum(resource) {
    return resource == 'LEFT'
        || resource == 'RIGHT'
        || resource == 'UP'
        || resource == 'DOWN';
  }
  
  function is_TestStruct(resource) {
    return resource.keys().hasOnly(['where','howMuch','someEnum'])
	      && ((!resource.keys().hasAny(['where'])) || (resource.where is string))
	      && ((!resource.keys().hasAny(['howMuch'])) || (resource.howMuch is int))
	      && ((!resource.keys().hasAny(['someEnum'])) || (is_TestEnum(resource.someEnum)));
  }
  
  function isComplete_TestStruct(resource) {
    return resource.keys().hasOnly(['where','howMuch','someEnum'])
	      && resource.keys().hasAll(['where','howMuch','someEnum'])
	      && resource.where is string
	      && resource.howMuch is int
	      && is_TestEnum(resource.someEnum);
  }
  
  /** A Test is a test model. */
  function is_TestModel(resource) {
    return resource.keys().hasOnly(['nestedCollection','name','age','pi','birthdate','isGood','data','friend','location','colors','numbers','bools','doubles','directions','models','models2','refs','modelRefs','meta','metaStrs','direction','testFile','url','nested','createdAt','updatedAt'])
        && ((!resource.keys().hasAny(['nestedCollection'])) || (resource.nestedCollection is string))
    /** The name. */
        && ((!resource.keys().hasAny(['name'])) || (resource.name is string))
    /** The age. */
        && ((!resource.keys().hasAny(['age'])) || (resource.age is int))
    /** The number pi. */
        && ((!resource.keys().hasAny(['pi'])) || (resource.pi is int))
    /** The birth date. */
        && ((!resource.keys().hasAny(['birthdate'])) || (resource.birthdate is timestamp))
    /** True if it is good. */
        && ((!resource.keys().hasAny(['isGood'])) || (resource.isGood is bool))
        && ((!resource.keys().hasAny(['data'])) || (resource.data is string))
        && ((!resource.keys().hasAny(['friend'])) || (resource.friend is string))
        && ((!resource.keys().hasAny(['location'])) || (resource.location is latlng))
        && ((!resource.keys().hasAny(['colors'])) || (resource.colors is list))
        && ((!resource.keys().hasAny(['numbers'])) || (resource.numbers is list))
        && ((!resource.keys().hasAny(['bools'])) || (resource.bools is list))
        && ((!resource.keys().hasAny(['doubles'])) || (resource.doubles is list))
        && ((!resource.keys().hasAny(['directions'])) || (resource.directions is list))
        && ((!resource.keys().hasAny(['models'])) || (resource.models is list))
        && ((!resource.keys().hasAny(['models2'])) || (resource.models2 is list))
        && ((!resource.keys().hasAny(['refs'])) || (resource.refs is list))
        && ((!resource.keys().hasAny(['modelRefs'])) || (resource.modelRefs is list))
        && ((!resource.keys().hasAny(['meta'])) || (resource.meta is map))
        && ((!resource.keys().hasAny(['metaStrs'])) || (resource.metaStrs is map))
        && ((!resource.keys().hasAny(['direction'])) || (is_TestEnum(resource.direction)))
        && ((!resource.keys().hasAny(['testFile'])) || (resource.testFile is path))
        && ((!resource.keys().hasAny(['url'])) || (resource.url is string))
        && ((!resource.keys().hasAny(['nested'])) || (is_TestStruct(resource.nested)))
    /** Record creation timestamp. */
        && ((!resource.keys().hasAny(['createdAt'])) || (resource.createdAt is timestamp))
    /** Record update timestamp. */
        && ((!resource.keys().hasAny(['updatedAt'])) || (resource.updatedAt is timestamp));
  }
  
  function is_TestTimestamps(resource) {
    return resource.keys().hasOnly(['createdAt','updatedAt'])
    /** Record creation timestamp. */
        && ((!resource.keys().hasAny(['createdAt'])) || (resource.createdAt is timestamp))
    /** Record update timestamp. */
        && ((!resource.keys().hasAny(['updatedAt'])) || (resource.updatedAt is timestamp));
  }
  
  function is_Test(resource) {
    return resource.keys().hasOnly(['direction'])
        && ((!resource.keys().hasAny(['direction'])) || (is_TestEnum(resource.direction)));
  }
  
  /** A Test is a test model. */
  function isComplete_TestModel(resource) {
    return resource.keys().hasOnly(['nestedCollection','name','age','pi','birthdate','isGood','data','friend','location','colors','numbers','bools','doubles','directions','models','models2','refs','modelRefs','meta','metaStrs','direction','testFile','url','nested','createdAt','updatedAt'])
	      && resource.keys().hasAll(['nestedCollection','name','age','pi','birthdate','isGood','data','friend','location','colors','numbers','bools','doubles','directions','models','models2','refs','modelRefs','meta','metaStrs','direction','testFile','url','nested','createdAt','updatedAt'])
        && resource.nestedCollection is string
    /** The name. */
        && resource.name is string
    /** The age. */
        && resource.age is int
    /** The number pi. */
        && resource.pi is int
    /** The birth date. */
        && resource.birthdate is timestamp
    /** True if it is good. */
        && resource.isGood is bool
        && resource.data is string
        && resource.friend is string
        && resource.location is latlng
        && resource.colors is list
        && resource.numbers is list
        && resource.bools is list
        && resource.doubles is list
        && resource.directions is list
        && resource.models is list
        && resource.models2 is list
        && resource.refs is list
        && resource.modelRefs is list
        && resource.meta is map
        && resource.metaStrs is map
        && is_TestEnum(resource.direction)
        && resource.testFile is path
        && resource.url is string
        && isComplete_TestStruct(resource.nested)
    /** Record creation timestamp. */
        && resource.createdAt is timestamp
    /** Record update timestamp. */
        && resource.updatedAt is timestamp;
  }
  
  function isComplete_TestTimestamps(resource) {
    return resource.keys().hasOnly(['createdAt','updatedAt'])
	      && resource.keys().hasAll(['createdAt','updatedAt'])
    /** Record creation timestamp. */
        && resource.createdAt is timestamp
    /** Record update timestamp. */
        && resource.updatedAt is timestamp;
  }
  
  function isComplete_Test(resource) {
    return resource.keys().hasOnly(['direction'])
	      && resource.keys().hasAll(['direction'])
        && is_TestEnum(resource.direction);
  }
